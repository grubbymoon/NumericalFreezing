 % % % % % % % % % % % % % % % % % % % % % % % % 
% heat transfer equation solver 1D compared with the figure in benmark book
% 
% Authors: Tianyuan Zheng
% Email  : tianyuan.zheng@ufz.de
% 
% % % % % % % % % % % % % % % % % % % % % % % % 

% The governing equation is: 
% rho*C*dT/dt - k*(d2T/dy2 + d2T/dx2) = 0 
% parameter input ----------------------------
% define heat capacity of water
HCa = 1000 ;   % 4181.3 J*kg-1*K-1
% define heat conductivity of water
HCo  = 3.2 ;  % 0.6 W*m-1*K-1
% define density of water
rho = 2500 ; % 1000 kg*m3-1


% boundary temperature
T_B_amb = -10;     % Celsius degree
T_A_in  = 10;     % Celsius degree
% end of parameter input ----------------------

% Preprocessing -------------------------------
% reading the nodes
nodes      = dlmread('nodes_coordinates.txt');
% reading the element connectivity
elements   = dlmread('elem_connectivity.txt');
% convert to matlab index start from one
elements   = elements + 1 ; 
nodes = nodes(:,:)*60 ;
% now the spacial dimension and element type
[nn,sdim]  = size(nodes);
[ne,dummy] = size(elements);
% plot the mesh to check

% boundary conditions
index1 = find(nodes(:,1) == 0); % get the index of nodes that the x value equals 0
index2 = find(nodes(:,1) == 60); % get the index of nodes that the y value bigger than 0.075
%index3 = find(nodes(:,2) < 0.125); % get the index of nodes that the y value smaller than 0.125
%index4 = find(nodes(:,1) == 1); % get the index of nodes that the x value equals 1 so i can do the validation
%index5 = find(nodes(:,2) > 0.099);
%index6 = find(nodes(:,2) < 0.101);
% index of the three regions above 
%index_bcn  = intersect(intersect(index1, index2), index3); 
index_bcn1 = index1;
index_bcn2 = index2;
%index_midpointat1 = intersect(intersect(index4, index5), index6);
%index_bcn = index1;
% assign the x,y value of the boundary into 'bc_middle_nodes'
bc_middel_nodes1 = nodes(index_bcn1,:);
bc_middel_nodes2 = nodes(index_bcn2,:);
% assign the number of row and column of 'bc_middle_nodes' to 'nbcn' and 'dummy'
[nbcn1,dummy] = size( bc_middel_nodes1 );
[nbcn2,dummy] = size( bc_middel_nodes2 );
bc_nodes_value1 = 1 * ones(nbcn1,1);
bc_nodes_value2 = 0 * ones(nbcn2,1);

% bc_ambient_nodes are the rest part
% index = find(bc_all_nodes ~= bc_middel_nodes);
% bc_ambient_nodes = bc_all_nodes(index,:);

% initial conditions
T_ini = ones(nn,1); 
T_ini = 0 * T_ini; 

% Processing ----------------------------------
% numerical control
max_lin_sol_iter = 1000; 
% time control
% time_steps = [0:10:400, 500:100:10000, 11000:1000:86400]';
% time_steps = [0:10:400, 500:100:10000]';
 time_steps = [0:86400*5:86400*365]';
% time_steps = [0:864:8640]'; % time interval is 864s for every step
% time_steps = [0:10:100]';
% time_Steps = [0:864:86400]';
[steps,dummy] = size(time_steps); 
steps = steps - 1; 
theta = 1.0;  % implicit
% theta = 0.5;  % Crank-Nicolson

% initialize previous and current solution matrix
u_pre  = sparse(nn,1 ); 
u_cur  = sparse(nn,1 ); 
u_pre  = T_ini; 

% storage space of unknowns after each time step
u_record      = zeros(nn, steps+1);
u_record(:,1) = u_pre;  

% time step loop 
for ti = 1 : steps; 
    % cleaning of LHS and RHS
    LHS    = sparse(nn,nn);
    RHS    = sparse(nn,1 );
    str = ['Time step ', num2str(ti), ' at time ', num2str(time_steps(ti+1))];
    disp(str);
    dt = time_steps(ti+1) - time_steps(ti);    
    % loop over all the elements, 
    for ie = 1 : ne % 'ne' is the number of the total elements 
        % get the coordinates of connecting nodes
        sctr  = elements(ie,:); % get the nodes of the local element 
        coord = nodes(sctr,:) ; % get the coordinates of the nodes 
        % local heat storage matrix
        M = rho*HCa*shapeshape_tri(coord);          % no coeff
        % local heat transfer matrix 
        S = dshapedshape_tri(coord,[HCo, 0.0; 0.0, HCo]);
        % local advection matrix
        % Adv  = shapedshape_tri( coord, [vel;0.0]);% 
        % local dispersion/diffusion matrix
        % Disp = dshapedshape_tri(coord, [Dt, 0.0; 0.0, 0.01*Dt]);
        % add advection and dispersion matrix t
        % S    = Adv + Disp;  
        % assemble to the LHS
        l_lhs= ((1.0/dt)*M + theta * S); 
        LHS(sctr,sctr) = LHS(sctr,sctr) + l_lhs; 
        % assemble to the RHS
        l_rhs= ((1.0/dt)*M - (1-theta)* S) * u_pre(sctr);  
        RHS(sctr) = RHS(sctr) + l_rhs; 
    end


    
    % check out the sparsity of LHS
    % spy(LHS);
    % imposing boundary conditions---------------------
    % loop over all boundary condition nodes
    for ib = 1 : nbcn1
        idx = index_bcn1(ib);
        % b(i) -= A(i,ii)*u_bar
        RHS = RHS - LHS(:,idx) * bc_nodes_value1(ib);
        % A(ii,ii) -> xii
        xii = LHS(idx,idx);
        % A(ii,j ) =  0
        LHS(idx,:) = 0.0;
        % A(i ,ii) = 0
        LHS(:,idx) = 0.0;
        % b(ii) = xii * u_bar
        RHS(idx) = xii * bc_nodes_value1(ib);
        % A(ii,ii) <- xii
        LHS(idx,idx) = xii; 
    end
    
    
    for ib = 1 : nbcn2
        idx = index_bcn2(ib);
        % b(i) -= A(i,ii)*u_bar
        RHS = RHS - LHS(:,idx) * bc_nodes_value2(ib);
        % A(ii,ii) -> xii
        xii = LHS(idx,idx);
        % A(ii,j ) =  0
        LHS(idx,:) = 0.0;
        % A(i ,ii) = 0
        LHS(:,idx) = 0.0;
        % b(ii) = xii * u_bar
        RHS(idx) = xii * bc_nodes_value2(ib);
        % A(ii,ii) <- xii
        LHS(idx,idx) = xii; 
    end
    
    % end of imposing boundary conditions--------------
%     
%     [i,j,val] = find(LHS);
%     data_dump = [i,j,val];
%     dlmwrite('LHS_right.txt',data_dump);
%     [i,j,val] = find(RHS);
%     data_dump = [i,j,val];
%     dlmwrite('RHS_right.txt',data_dump);
    
    % solve linear equation system. 
    u_cur = bicgstab(LHS,RHS,1e-6,max_lin_sol_iter); % solve the linear system
    % u_cur = LHS \ RHS;
    % copy current result to previous
    u_pre = u_cur; 
    % save current result
    u_record(:,ti+1) = u_cur;  
    
    % hold on;
end

% Postprocessing-------------------------------
% 
% hold on;

% take the right boundary and plot their values. 
% index_bc_right = find(nodes(:,1) == 1.0);
% bc_right_nodes = nodes(index_bc_right,:);
% bc_right_values= u_record(index_bc_right, ti);

scatter(nodes(:,1),nodes(:,2),5,u_record(:,10));











